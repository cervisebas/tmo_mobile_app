diff --git a/node_modules/react-native-image-viewing/dist/ImageViewing.js b/node_modules/react-native-image-viewing/dist/ImageViewing.js
index 3d7641a..a2297bc 100644
--- a/node_modules/react-native-image-viewing/dist/ImageViewing.js
+++ b/node_modules/react-native-image-viewing/dist/ImageViewing.js
@@ -6,13 +6,14 @@
  *
  */
 import React, { useCallback, useRef, useEffect } from "react";
-import { Animated, Dimensions, StyleSheet, View, VirtualizedList, Modal, } from "react-native";
+import { Animated, Dimensions, StyleSheet, View, VirtualizedList, Modal as NativeModal, Platform, } from "react-native";
 import ImageItem from "./components/ImageItem/ImageItem";
 import ImageDefaultHeader from "./components/ImageDefaultHeader";
 import StatusBarManager from "./components/StatusBarManager";
 import useAnimatedComponents from "./hooks/useAnimatedComponents";
 import useImageIndexChange from "./hooks/useImageIndexChange";
 import useRequestClose from "./hooks/useRequestClose";
+import RNModal from "react-native-modal";
 const DEFAULT_ANIMATION_TYPE = "fade";
 const DEFAULT_BG_COLOR = "#000";
 const DEFAULT_DELAY_LONG_PRESS = 800;
@@ -37,7 +38,26 @@ function ImageViewing({ images, keyExtractor, imageIndex, visible, onRequestClos
     if (!visible) {
         return null;
     }
-    return (<Modal transparent={presentationStyle === "overFullScreen"} visible={visible} presentationStyle={presentationStyle} animationType={animationType} onRequestClose={onRequestCloseEnhanced} supportedOrientations={["portrait"]} hardwareAccelerated>
+
+    const Modal = Platform.select({
+        ios: NativeModal,
+        default: RNModal,
+    });
+
+    return (<Modal
+        transparent={presentationStyle === "overFullScreen"}
+        visible={visible}
+        isVisible={visible}
+        presentationStyle={presentationStyle}
+        animationType={animationType}
+        onRequestClose={onRequestCloseEnhanced}
+        supportedOrientations={["portrait"]}
+        hardwareAccelerated
+        style={{margin: 0}}
+        coverScreen={false}
+        useNativeDriver={true}
+        useNativeDriverForBackdrop={true}
+    >
       <StatusBarManager presentationStyle={presentationStyle}/>
       <View style={[styles.container, { opacity, backgroundColor }]}>
         <Animated.View style={[styles.header, { transform: headerTransform }]}>
diff --git a/node_modules/react-native-image-viewing/dist/components/ImageDefaultHeader.js b/node_modules/react-native-image-viewing/dist/components/ImageDefaultHeader.js
index 33c9def..97c7633 100644
--- a/node_modules/react-native-image-viewing/dist/components/ImageDefaultHeader.js
+++ b/node_modules/react-native-image-viewing/dist/components/ImageDefaultHeader.js
@@ -6,7 +6,8 @@
  *
  */
 import React from "react";
-import { SafeAreaView, Text, TouchableOpacity, StyleSheet } from "react-native";
+import { Text, TouchableOpacity, StyleSheet } from "react-native";
+import { SafeAreaView } from "react-native-safe-area-context";
 const HIT_SLOP = { top: 16, left: 16, bottom: 16, right: 16 };
 const ImageDefaultHeader = ({ onRequestClose }) => (<SafeAreaView style={styles.root}>
     <TouchableOpacity style={styles.closeButton} onPress={onRequestClose} hitSlop={HIT_SLOP}>
diff --git a/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.android.js b/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.android.js
index 5fcaa9f..94f2a25 100644
--- a/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.android.js
+++ b/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.android.js
@@ -11,6 +11,10 @@ import useImageDimensions from "../../hooks/useImageDimensions";
 import usePanResponder from "../../hooks/usePanResponder";
 import { getImageStyles, getImageTransform } from "../../utils";
 import { ImageLoading } from "./ImageLoading";
+import { Image } from "expo-image";
+
+const AnimatedImage = Animated.createAnimatedComponent(Image);
+
 const SWIPE_CLOSE_OFFSET = 75;
 const SWIPE_CLOSE_VELOCITY = 1.75;
 const SCREEN = Dimensions.get("window");
@@ -68,7 +72,7 @@ const ImageItem = ({ imageSrc, onZoom, onRequestClose, onLongPress, delayLongPre
         onScroll,
         onScrollEndDrag,
     })}>
-      <Animated.Image {...panHandlers} source={imageSrc} style={imageStylesWithOpacity} onLoad={onLoaded}/>
+      <AnimatedImage {...panHandlers} source={imageSrc} style={imageStylesWithOpacity} onLoad={onLoaded}/>
       {(!isLoaded || !imageDimensions) && <ImageLoading />}
     </ScrollView>);
 };
diff --git a/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.ios.js b/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.ios.js
index 0708505..d99ab2e 100644
--- a/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.ios.js
+++ b/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.ios.js
@@ -11,6 +11,10 @@ import useDoubleTapToZoom from "../../hooks/useDoubleTapToZoom";
 import useImageDimensions from "../../hooks/useImageDimensions";
 import { getImageStyles, getImageTransform } from "../../utils";
 import { ImageLoading } from "./ImageLoading";
+import { Image } from "expo-image";
+
+const AnimatedImage = Animated.createAnimatedComponent(Image);
+
 const SWIPE_CLOSE_OFFSET = 75;
 const SWIPE_CLOSE_VELOCITY = 1.55;
 const SCREEN = Dimensions.get("screen");
@@ -26,7 +30,7 @@ const ImageItem = ({ imageSrc, onZoom, onRequestClose, onLongPress, delayLongPre
     const scrollValueY = new Animated.Value(0);
     const scaleValue = new Animated.Value(scale || 1);
     const translateValue = new Animated.ValueXY(translate);
-    const maxScale = scale && scale > 0 ? Math.max(1 / scale, 1) : 1;
+    const maxScale = 3;
     const imageOpacity = scrollValueY.interpolate({
         inputRange: [-SWIPE_CLOSE_OFFSET, 0, SWIPE_CLOSE_OFFSET],
         outputRange: [0.5, 1, 0.5],
@@ -62,7 +66,7 @@ const ImageItem = ({ imageSrc, onZoom, onRequestClose, onLongPress, delayLongPre
     })}>
         {(!loaded || !imageDimensions) && <ImageLoading />}
         <TouchableWithoutFeedback onPress={doubleTapToZoomEnabled ? handleDoubleTap : undefined} onLongPress={onLongPressHandler} delayLongPress={delayLongPress}>
-          <Animated.Image source={imageSrc} style={imageStylesWithOpacity} onLoad={() => setLoaded(true)}/>
+          <AnimatedImage source={imageSrc} style={imageStylesWithOpacity} onLoad={() => setLoaded(true)}/>
         </TouchableWithoutFeedback>
       </ScrollView>
     </View>);
diff --git a/node_modules/react-native-image-viewing/dist/components/StatusBarManager.js b/node_modules/react-native-image-viewing/dist/components/StatusBarManager.js
index 7677856..c3e7067 100644
--- a/node_modules/react-native-image-viewing/dist/components/StatusBarManager.js
+++ b/node_modules/react-native-image-viewing/dist/components/StatusBarManager.js
@@ -1,6 +1,8 @@
 import { useEffect } from "react";
 import { Platform, StatusBar, } from "react-native";
 const StatusBarManager = ({ presentationStyle, }) => {
+    return null;
+    
     if (Platform.OS === "ios" || presentationStyle !== "overFullScreen") {
         return null;
     }
diff --git a/node_modules/react-native-image-viewing/dist/hooks/useImageDimensions.js b/node_modules/react-native-image-viewing/dist/hooks/useImageDimensions.js
index d89a3a1..9f3065d 100644
--- a/node_modules/react-native-image-viewing/dist/hooks/useImageDimensions.js
+++ b/node_modules/react-native-image-viewing/dist/hooks/useImageDimensions.js
@@ -6,6 +6,7 @@
  *
  */
 import { useEffect, useState } from "react";
+import { Image as ExpoImage } from "expo-image";
 import { Image } from "react-native";
 import { createCache } from "../utils";
 const CACHE_SIZE = 50;
@@ -35,10 +36,12 @@ const useImageDimensions = (image) => {
                 }
                 else {
                     // @ts-ignore
-                    Image.getSizeWithHeaders(source.uri, source.headers, (width, height) => {
-                        imageDimensionsCache.set(cacheKey, { width, height });
-                        resolve({ width, height });
-                    }, () => {
+                    ExpoImage.loadAsync({
+                        uri: source.uri,
+                        headers: source.headers,
+                    }).then(({width, height}) => {
+                        resolve({width, height});
+                    }).catch(() => {
                         resolve({ width: 0, height: 0 });
                     });
                 }
