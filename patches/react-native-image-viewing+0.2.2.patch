diff --git a/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.android.js b/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.android.js
index 5fcaa9f..94f2a25 100644
--- a/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.android.js
+++ b/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.android.js
@@ -11,6 +11,10 @@ import useImageDimensions from "../../hooks/useImageDimensions";
 import usePanResponder from "../../hooks/usePanResponder";
 import { getImageStyles, getImageTransform } from "../../utils";
 import { ImageLoading } from "./ImageLoading";
+import { Image } from "expo-image";
+
+const AnimatedImage = Animated.createAnimatedComponent(Image);
+
 const SWIPE_CLOSE_OFFSET = 75;
 const SWIPE_CLOSE_VELOCITY = 1.75;
 const SCREEN = Dimensions.get("window");
@@ -68,7 +72,7 @@ const ImageItem = ({ imageSrc, onZoom, onRequestClose, onLongPress, delayLongPre
         onScroll,
         onScrollEndDrag,
     })}>
-      <Animated.Image {...panHandlers} source={imageSrc} style={imageStylesWithOpacity} onLoad={onLoaded}/>
+      <AnimatedImage {...panHandlers} source={imageSrc} style={imageStylesWithOpacity} onLoad={onLoaded}/>
       {(!isLoaded || !imageDimensions) && <ImageLoading />}
     </ScrollView>);
 };
diff --git a/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.ios.js b/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.ios.js
index 0708505..f8bc44a 100644
--- a/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.ios.js
+++ b/node_modules/react-native-image-viewing/dist/components/ImageItem/ImageItem.ios.js
@@ -11,6 +11,10 @@ import useDoubleTapToZoom from "../../hooks/useDoubleTapToZoom";
 import useImageDimensions from "../../hooks/useImageDimensions";
 import { getImageStyles, getImageTransform } from "../../utils";
 import { ImageLoading } from "./ImageLoading";
+import { Image } from "expo-image";
+
+const AnimatedImage = Animated.createAnimatedComponent(Image);
+
 const SWIPE_CLOSE_OFFSET = 75;
 const SWIPE_CLOSE_VELOCITY = 1.55;
 const SCREEN = Dimensions.get("screen");
@@ -62,7 +66,7 @@ const ImageItem = ({ imageSrc, onZoom, onRequestClose, onLongPress, delayLongPre
     })}>
         {(!loaded || !imageDimensions) && <ImageLoading />}
         <TouchableWithoutFeedback onPress={doubleTapToZoomEnabled ? handleDoubleTap : undefined} onLongPress={onLongPressHandler} delayLongPress={delayLongPress}>
-          <Animated.Image source={imageSrc} style={imageStylesWithOpacity} onLoad={() => setLoaded(true)}/>
+          <AnimatedImage source={imageSrc} style={imageStylesWithOpacity} onLoad={() => setLoaded(true)}/>
         </TouchableWithoutFeedback>
       </ScrollView>
     </View>);
diff --git a/node_modules/react-native-image-viewing/dist/hooks/useImageDimensions.js b/node_modules/react-native-image-viewing/dist/hooks/useImageDimensions.js
index d89a3a1..9f3065d 100644
--- a/node_modules/react-native-image-viewing/dist/hooks/useImageDimensions.js
+++ b/node_modules/react-native-image-viewing/dist/hooks/useImageDimensions.js
@@ -6,6 +6,7 @@
  *
  */
 import { useEffect, useState } from "react";
+import { Image as ExpoImage } from "expo-image";
 import { Image } from "react-native";
 import { createCache } from "../utils";
 const CACHE_SIZE = 50;
@@ -35,10 +36,12 @@ const useImageDimensions = (image) => {
                 }
                 else {
                     // @ts-ignore
-                    Image.getSizeWithHeaders(source.uri, source.headers, (width, height) => {
-                        imageDimensionsCache.set(cacheKey, { width, height });
-                        resolve({ width, height });
-                    }, () => {
+                    ExpoImage.loadAsync({
+                        uri: source.uri,
+                        headers: source.headers,
+                    }).then(({width, height}) => {
+                        resolve({width, height});
+                    }).catch(() => {
                         resolve({ width: 0, height: 0 });
                     });
                 }
